pipeline MobileTempData {

    FetchZipFile -> ExtractArchive -> SelectCSVFile -> ParseTextFile
        -> InterpretCSV -> UpdateMainHeaders -> UpdateBatteryTempHeader
        -> ProcessDataTable -> ConvertTemperatureColumn -> ConvertBatteryTempColumn -> SaveToDatabase;

    // Step 1: Download a zip file from a URL
    block FetchZipFile oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Step 2: Extract the contents of the downloaded zip file
    block ExtractArchive oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // Step 3: Choose the specific CSV file from the extracted contents
    block SelectCSVFile oftype FilePicker {
        path: "/data.csv";
    }

    // Step 4: Parse the raw text file for further processing
    block ParseTextFile oftype TextFileInterpreter {}

    // Step 5: Interpret the CSV file with a custom delimiter
    block InterpretCSV oftype CSVInterpreter {
        delimiter: ";";
    }

    // Step 6: Rename the primary column headers for better readability
    block UpdateMainHeaders oftype CellWriter {
        at: range A1:E1;
        write: ['id', 'producer', 'model', 'month', 'temperature'];
    }

    // Step 7: Rename the column for battery temperature
    block UpdateBatteryTempHeader oftype CellWriter {
        at: cell F1;
        write: ['battery_temperature'];
    }

    // Step 8: Apply a formula to convert temperatures from Celsius to Fahrenheit
    transform TempCtoF {
        from CelsiusValue oftype decimal;
        to FahrenheitValue oftype decimal;
        FahrenheitValue: (CelsiusValue * 9 / 5) + 32;
    }

    // Step 9: Transform the "temperature" column to Fahrenheit
    block ConvertTemperatureColumn oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        uses: TempCtoF;
    }

    // Step 10: Transform the "battery_temperature" column to Fahrenheit
    block ConvertBatteryTempColumn oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        uses: TempCtoF;
    }

    // Step 11: Define table structure for final data processing
    block ProcessDataTable oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype integer,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ];
    }

    // Step 12: Save the transformed data into a SQLite database
    block SaveToDatabase oftype SQLiteLoader {
        table: "temperatures";
        file: "temperatures.sqlite";
    }
}
